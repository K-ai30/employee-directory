{"version":3,"sources":["utils/API.js","components/Jumbotron/jumbotron.js","components/SearchBar/searchbar.js","components/Table/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Jumbotron","className","Component","Searchbar","props","htmlFor","onChange","handleInputChange","value","searchTerm","type","placeholder","aria-label","Table","scope","onClick","handleSort","class","employeeList","map","employee","index","key","src","picture","thumbnail","alt","name","first","last","phone","email","moment","dob","date","format","App","state","alphaNumericOrder","event","target","setState","filter","includes","getEmployees","sortBy","console","log","sortedEmployees","sort","a","b","this","API","then","res","data","results","catch","err","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e0544a0d.chunk.js","sourcesContent":["import axios from \"axios\";\nconst EMPURL = \"https://randomuser.me/api/?results=50&nat=us\";\n\n// Export an object containing methods we'll use for accessing the Random User API\nexport default {\n  getEmployees: function() {\n    return axios.get(EMPURL);\n  },\n};","import React, { Component } from 'react';\nimport \"./jumbotron.css\";\n\nexport default class Jumbotron extends Component {\n    render() {\n        return (\n            <div className=\"heading\">\n                <h1>Employee Directory</h1>\n                <h6>Click on carrots to filter by heading or use the search box to narrow your results.</h6>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport \"./searchbar.css\";\n\nconst Searchbar = props => {\n        return (\n            <div className=\"searches\">\n                <label className=\"navbar-light text-center col-md-12\" htmlFor=\"search\"><h4 className=\"text-center\">Search</h4></label>\n                <nav className=\"navbar navbar-light custom-background justify-content-center\">\n                    <form className=\"form-inline\">\n                    <input \n                        onChange={props.handleInputChange}\n                        value={props.searchTerm}\n                        className=\"form-control mr-sm-2\" \n                        type=\"search\" \n                        placeholder=\"Search\" \n                        aria-label=\"Search\"\n                    >  \n                    </input>\n                   </form>    \n                </nav>\n            </div>\n        )\n}\n\nexport default Searchbar;","import React, { Component } from \"react\";\nimport \"./style.css\";\nimport moment from 'moment';\nimport API from \"../../utils/API\";\nimport '../../App';\n\nexport default function Table (props) {\n    //1. create a button next to our th for Name that will sort when clicked\n    \n    //2. pass that button a click handler that we define in App.js (pass it the same way we pass employeeList, aka props)\n    //3. Define a click handler in app.js that will sort this.state.employeeList alphabetically by last name (or first name, dealer's choice)\n    //      --look at MDN's Array.prototype.sort() documentation for how to sort an array of objects by a specific property in each object\n    return (\n            <div className=\"col-md-11 mx-auto\">\n                <table className=\"table table-striped\">\n                    <thead>\n                        <tr>\n                        <th scope=\"col\">Image</th>\n                        <th scope=\"col\">Name <button onClick={() => {props.handleSort('name')}}><i class=\"fas fa-sort-down\"></i></button></th>\n                        <th scope=\"col\">Phone <button className=\"disabled\"><i class=\"fas fa-sort-down\"></i></button></th>\n                        <th scope=\"col\">Email <button onClick={() => {props.handleSort('email')}}><i class=\"fas fa-sort-down\"></i></button></th>\n                        <th scope=\"col\">DOB <button className=\"disabled\"><i class=\"fas fa-sort-down\"></i></button></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {props.employeeList.map((employee, index) => (\n                            <tr key={index}>\n                                {/* <th scope=\"row\"></th> */}\n                                <td><img src={ employee.picture.thumbnail } alt=\"photo id\"/></td>\n                                <td>{ employee.name.first } { employee.name.last }</td>\n                                <td>{ employee.phone }</td>\n                                <td>{ employee.email }</td>\n                                <td>{ moment(employee.dob.date).format(\"MM/DD/YYYY\") }</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                    </table>\n            </div>\n        )\n}","import React from 'react';\nimport API from \"./utils/API\";\nimport Jumbotron from './components/Jumbotron/jumbotron';\nimport Searchbar from './components/SearchBar/searchbar';\nimport Table from './components/Table/index';\n\nexport default class App extends React.Component {\n  \n  state = { \n    employeeList: [],\n    searchTerm: \"\",\n    // results: [],\n    alphaNumericOrder: true\n  }\n\n  componentDidMount() {\n      this.getEmployees();\n  }\n\n  getEmployees() {\n    API.getEmployees().then( res => {\n      this.setState({ employeeList: res.data.results });\n    })   \n    .catch(err => console.log(err))     \n  }\n\n  handleInputChange = event => {\n      const value = event.target.value;\n      if (!value) {\n        this.setState({ searchTerm: \"\"})\n        this.getEmployees();\n      } else {\n        this.setState({\n          employeeList: this.state.employeeList.filter(employee => {\n            if (employee.name.first.includes(value)\n            || employee.name.last.includes(value)\n            || employee.email.includes(value)) {\n              return employee;\n            }\n          }),\n          searchTerm: value\n        });\n      }\n  };\n\n  handleSort = (sortBy) => {\n\t\tconsole.log(sortBy);\n\t\tconst { employeeList, alphaNumericOrder } = this.state;\n\t\tlet sortedEmployees;\n\t\tif (sortBy === 'name') {\n\t\t\tif (alphaNumericOrder === true) {\n\t\t\t\tsortedEmployees = employeeList.sort((a, b) => {\n\t\t\t\t\tif (a.name.first < b.name.first) {\n\t\t\t\t\t\treturn -1;\n          }\n\t\t\t\t\tif (a.name.first > b.name.first) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tsortedEmployees = employeeList.sort((a, b) => {\n\t\t\t\t\tif (a.name.first > b.name.first) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a.name.first < b.name.first) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (sortBy === 'email') {\n\t\t\tif (alphaNumericOrder === true) {\n\t\t\t\tsortedEmployees = employeeList.sort((a, b) => {\n\t\t\t\t\tif (a.email < b.email) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a.email > b.email) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tsortedEmployees = employeeList.sort((a, b) => {\n\t\t\t\t\tif (a.email > b.email) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a.email < b.email) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tthis.setState({ employeeList: employeeList, alphaNumericOrder: !alphaNumericOrder });\n\t\tconsole.log(sortedEmployees);\n\n  };\n\n  render() {\n    console.log('Results: ', this.state);\n    return (\n      <div className=\"App\">\n        <Jumbotron />\n      <div>\n        <Searchbar \n          searchTerm={this.state.searchTerm} \n          handleInputChange={this.handleInputChange}\n        />\n        <Table employeeList={this.state.employeeList}\n        handleSort={this.handleSort}/>\n      </div>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}